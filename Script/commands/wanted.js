const axios = require("axios");
const fs = require("fs");
const Canvas = require("canvas");
const path = require("path");

module.exports.config = {
  name: "wanted",
  version: "2.1.0",
  hasPermssion: 0,
  credits: "Hridoy Khan + GPT",
  description: "Make a funny wanted poster for tagged or random user üòé",
  commandCategory: "fun",
  usages: "/wanted [@mention]",
  cooldowns: 5,
};

module.exports.run = async function ({ api, event, Users }) {
  try {
    const { threadID, messageID, mentions, participantIDs } = event;

    // ‚úÖ Template Paths
    const onlineTemplate = "https://i.imgur.com/pbC3EwN.jpeg"; // online
    const localTemplate = path.join(__dirname, "../cache/wanted.jpg"); // local backup

    // ‚úÖ Target selection
    let targetID;
    if (Object.keys(mentions).length > 0) {
      targetID = Object.keys(mentions)[0];
    } else {
      const randomIndex = Math.floor(Math.random() * participantIDs.length);
      targetID = participantIDs[randomIndex];
    }

    // üë§ Get avatar
    const avatarUrl = await Users.getAvatarUrl(targetID);

    // üñºÔ∏è Load template (try online first)
    let bg;
    try {
      bg = await Canvas.loadImage(onlineTemplate);
    } catch {
      if (fs.existsSync(localTemplate)) {
        bg = await Canvas.loadImage(localTemplate);
      } else {
        return api.sendMessage("‚ùå Template image not found!", threadID);
      }
    }

    const avatar = await Canvas.loadImage(avatarUrl);
    const canvas = Canvas.createCanvas(bg.width, bg.height);
    const ctx = canvas.getContext("2d");

    // Draw template
    ctx.drawImage(bg, 0, 0, bg.width, bg.height);

    // üéØ Profile placement (exact center of wanted frame)
    const x = 165;
    const y = 365;
    const w = 420;
    const h = 420;
    ctx.drawImage(avatar, x, y, w, h);

    // Save output
    const output = path.join(__dirname, "../cache/wanted_output.png");
    fs.writeFileSync(output, canvas.toBuffer());

    // üòπ Funny reasons (random pick)
    const reasons = [
      "üíÄ Crime: ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ü‡¶∞ ‡¶ï‡¶Æ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ!",
      "üòÇ Crime: ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ crush ‡¶ï‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶≠‡¶æ‡¶¨‡¶æ!",
      "üî• Crime: ‡¶¶‡¶ø‡¶®‡¶∞‡¶æ‡¶§ memes ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã without reason!",
      "üòà Crime: ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶æ ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ!",
      "ü§° Crime: Group ‡¶è fake deep quote ‡¶¶‡ßá‡¶ì‡ßü‡¶æ!",
      "ü•¥ Crime: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‚ÄòHi baby‚Äô ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã!",
      "üì± Crime: ‡ßß‡ß¶‡ß¶‡¶ü‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‚Äògm‚Äô ‡¶¶‡ßá‡¶ì‡ßü‡¶æ!",
      "üêç Crime: ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ carry ‡¶ï‡¶∞‡¶æ, snake confirmed!",
      "üí∏ Crime: ‡¶≤‡ßã‡¶® ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ!",
      "ü•µ Crime: ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá '‡¶≠‡¶æ‡¶á ‡¶ú‡¶æ‡¶®' ‡¶¨‡¶≤‡¶æ!",
      "ü¶∏ Crime: ‡¶®‡¶ø‡¶ú‡ßá‡¶∞‡¶á hero ‡¶≠‡¶æ‡¶¨‡¶æ without script!",
      "üò§ Crime: Admin ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá attitude ‡¶Æ‡¶æ‡¶∞‡¶æ!",
      "üëª Crime: Ghost ‡¶π‡ßü‡ßá ‡ß© ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞ reply ‡¶¶‡ßá‡¶ì‡ßü‡¶æ!",
      "üçî Crime: ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶ñ‡ßá‡ßü‡ßá deny ‡¶ï‡¶∞‡¶æ!",
      "üïµÔ∏è Crime: Crush ‡¶è‡¶∞ DP zoom ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ!",
      "ü§£ Crime: ‡¶Ö‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá ‚Äò‡¶≠‡¶æ‡¶á ‡¶ú‡¶æ‡¶®‡ßÅ‚Äô react ‡¶¶‡ßá‡¶ì‡ßü‡¶æ!",
      "üìû Crime: ‡¶ï‡¶≤ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßÅ‡¶™ ‡¶•‡¶æ‡¶ï‡¶æ ‡ßß‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü!",
      "üß† Crime: brain.exe not responding since 2020!",
      "üê∏ Crime: Meme ‡¶¨‡ßã‡¶ù‡ßá ‡¶®‡¶æ ‡¶§‡¶¨‡ßÅ react ‡¶¶‡ßá‡ßü!",
      "üé≠ Crime: Fake ID ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶Æ ‡¶ï‡¶∞‡¶æ!",
      "üåö Crime: Group ‡¶è random ‚ÄòHi‚Äô ‡¶≤‡ßá‡¶ñ‡¶æ!",
      "ü™û Crime: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® mirror ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá confession!",
      "ü¶Ñ Crime: Too much attitude with zero talent!",
      "üßõ Crime: ‡¶∞‡¶æ‡¶§ ‡ß©‡¶ü‡¶æ‡ßü status ‡¶¶‡ßá‡ßü ‚Äò‡¶Ü‡¶Æ‡¶ø ‡¶≠‡¶æ‡¶≤‡ßã ‡¶®‡ßá‡¶á‚Äô!",
      "üòπ Crime: Too funny to be free! Lock him up!"
    ];

    const msg = `üö® *Wanted Notice Issued!* üö®\n\n${reasons[Math.floor(Math.random() * reasons.length)]}`;

    // Send final
    return api.sendMessage(
      { body: msg, attachment: fs.createReadStream(output) },
      threadID,
      () => fs.unlinkSync(output),
      messageID
    );

  } catch (err) {
    console.error(err);
    return api.sendMessage("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ó‡¶®‡ßç‡¶°‡¶ó‡ßã‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶≠‡¶æ‡¶á!", event.threadID);
  }
};
